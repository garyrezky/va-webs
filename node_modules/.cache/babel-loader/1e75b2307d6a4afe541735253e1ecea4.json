{"ast":null,"code":"var _jsxFileName = \"/Users/muhammad-mac/Documents/va-web/src/components/maps.js\";\nimport React, { Component } from 'react';\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport Modals from '../components/modalSignup';\nimport '../App.css';\nimport { Button, Col, Row, Container, Form } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nam4core.useTheme(am4themes_animated); // const Register = () => {\n\nclass Maps extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isOpen: false\n    };\n\n    this.openModal = () => this.setState({\n      isOpen: true\n    });\n\n    this.closeModal = () => this.setState({\n      isOpen: false\n    });\n  }\n\n  componentDidMount() {\n    // Create map instance\n    var chart = am4core.create(\"chartdiv\", am4maps.MapChart); // Set map definition\n\n    chart.geodataSource.url = \"https://www.amcharts.com/lib/4/geodata/json/indonesiaLow.json\";\n    chart.geodataSource.events.on(\"parseended\", function (event) {\n      let data = [];\n\n      for (var i = 0; i < event.target.data.features.length; i++) {\n        data.push({\n          id: event.target.data.features[i].id,\n          value: Math.round(Math.random() * 10000)\n        });\n      }\n\n      polygonSeries.data = data;\n    }); // Set projection\n\n    chart.projection = new am4maps.projections.Mercator(); // Add zoom control\n\n    chart.zoomControl = new am4maps.ZoomControl(); //   // Set initial zoom\n\n    chart.homeZoomLevel = 1; // Create map polygon series\n    //   var polygonSeries = chart.series.push(new am4maps.MapPolygonSeries());\n    //   polygonSeries.mapPolygons.template.strokeWidth = 0.5;\n\n    let polygonSeries = new am4maps.MapPolygonSeries();\n    polygonSeries.useGeodata = true;\n    chart.series.push(polygonSeries); // Make map load polygon (like country names) data from GeoJSON\n\n    polygonSeries.useGeodata = true; // Configure series\n    //   var polygonTemplate = polygonSeries.mapPolygons.template;\n    //   polygonTemplate.tooltipText = \"{name}: {id}\";\n    //   polygonTemplate.fill = am4core.color(\"#aac4e7\");\n    // Create hover state and set alternative fill color\n    //   var hs = polygonTemplate.states.create(\"hover\");\n    //   hs.properties.fill = chart.colors.getIndex(1);\n\n    let polygonTemplate = polygonSeries.mapPolygons.template;\n    polygonTemplate.tooltipText = \"{name}: {id}\"; // polygonTemplate.fill = am4core.color(\"#96BDC6\");\n    // Create hover state and set alternative fill color\n\n    let hs = polygonTemplate.states.create(\"hover\");\n    hs.properties.fill = am4core.color(\"#CC0000\");\n    var series1 = chart.series.push(new am4maps.MapPolygonSeries());\n    series1.name = \"Filled\";\n    series1.useGeodata = true;\n    series1.include = [\"ID-MA\", \"ID-SA\"];\n    series1.mapPolygons.template.tooltipText = \"{name}: {id}\";\n    series1.mapPolygons.template.fill = am4core.color(\"#96BDC6\");\n    series1.fill = am4core.color(\"#96BDC6\");\n    let homeButton = new am4core.Button(); // Home Button \n\n    homeButton.events.on(\"hit\", function () {\n      chart.goHome();\n    });\n    homeButton.icon = new am4core.Sprite();\n    homeButton.padding(7, 5, 7, 5);\n    homeButton.width = 30;\n    homeButton.icon.path = \"M16,8 L14,8 L14,16 L10,16 L10,10 L6,10 L6,16 L2,16 L2,8 L0,8 L8,0 L16,8 Z M16,8\";\n    homeButton.marginBottom = 10;\n    homeButton.parent = chart.zoomControl;\n    homeButton.insertBefore(chart.zoomControl.plusButton); // Create active state\n    //   var activeState = polygonTemplate.states.create(\"active\");\n    //   activeState.properties.fill = chart.colors.getIndex(1);\n    //   // Create an event to toggle \"active\" state\n    //   polygonTemplate.events.on(\"hit\", function (event) {\n    //     event.target.isActive = !event.target.isActive;\n    //   })\n  }\n\n  render() {\n    // const [modalShow, setModalShow] = useState(false); onClick={this.openModal}\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"chartdiv\",\n        style: {\n          width: \"100%\",\n          height: \"700px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Modals, {\n        show: this.state.isOpen,\n        onHide: this.closeModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default Maps;","map":{"version":3,"sources":["/Users/muhammad-mac/Documents/va-web/src/components/maps.js"],"names":["React","Component","am4core","am4maps","am4themes_animated","Modals","Button","Col","Row","Container","Form","useTheme","Maps","state","isOpen","openModal","setState","closeModal","componentDidMount","chart","create","MapChart","geodataSource","url","events","on","event","data","i","target","features","length","push","id","value","Math","round","random","polygonSeries","projection","projections","Mercator","zoomControl","ZoomControl","homeZoomLevel","MapPolygonSeries","useGeodata","series","polygonTemplate","mapPolygons","template","tooltipText","hs","states","properties","fill","color","series1","name","include","homeButton","goHome","icon","Sprite","padding","width","path","marginBottom","parent","insertBefore","plusButton","render","height"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\"; \nimport Modals from '../components/modalSignup'\nimport '../App.css'\n\nimport { Button, Col, Row, Container, Form } from 'react-bootstrap'\nam4core.useTheme(am4themes_animated);\n\n// const Register = () => {\n    class Maps extends Component {\n\n        state = {\n            isOpen: false\n          };\n        \n          openModal = () => this.setState({ isOpen: true });\n          closeModal = () => this.setState({ isOpen: false });\n      \n        componentDidMount() {\n          // Create map instance\n          var chart = am4core.create(\"chartdiv\", am4maps.MapChart);\n\n          // Set map definition\n          chart.geodataSource.url = \"https://www.amcharts.com/lib/4/geodata/json/indonesiaLow.json\";\n          chart.geodataSource.events.on(\"parseended\", function(event) {\n            let data = [];\n            for(var i = 0; i < event.target.data.features.length; i++) {\n              data.push({\n                id: event.target.data.features[i].id,\n                value: Math.round( Math.random() * 10000 )\n              })\n            }\n            polygonSeries.data = data;\n          })\n      \n          // Set projection\n          chart.projection = new am4maps.projections.Mercator();\n      \n     \n\n          // Add zoom control\n          chart.zoomControl = new am4maps.ZoomControl();\n      \n        //   // Set initial zoom\n          chart.homeZoomLevel = 1;\n      \n          // Create map polygon series\n        //   var polygonSeries = chart.series.push(new am4maps.MapPolygonSeries());\n        //   polygonSeries.mapPolygons.template.strokeWidth = 0.5;\n      \n            let polygonSeries = new am4maps.MapPolygonSeries();\n            polygonSeries.useGeodata = true;\n            chart.series.push(polygonSeries);\n      \n          // Make map load polygon (like country names) data from GeoJSON\n          polygonSeries.useGeodata = true;\n      \n          // Configure series\n        //   var polygonTemplate = polygonSeries.mapPolygons.template;\n      \n        //   polygonTemplate.tooltipText = \"{name}: {id}\";\n        //   polygonTemplate.fill = am4core.color(\"#aac4e7\");\n      \n          // Create hover state and set alternative fill color\n        //   var hs = polygonTemplate.states.create(\"hover\");\n        //   hs.properties.fill = chart.colors.getIndex(1);\n      \n        let polygonTemplate = polygonSeries.mapPolygons.template;\n        polygonTemplate.tooltipText = \"{name}: {id}\";\n        // polygonTemplate.fill = am4core.color(\"#96BDC6\");\n        \n        // Create hover state and set alternative fill color\n        let hs = polygonTemplate.states.create(\"hover\");\n  hs.properties.fill = am4core.color(\"#CC0000\");\n\n        var series1 = chart.series.push(new am4maps.MapPolygonSeries());\n        series1.name = \"Filled\";\n        series1.useGeodata = true;\n        series1.include = [\"ID-MA\", \"ID-SA\"];\n        series1.mapPolygons.template.tooltipText = \"{name}: {id}\";\n        series1.mapPolygons.template.fill = am4core.color(\"#96BDC6\");\n        series1.fill = am4core.color(\"#96BDC6\");\n\n        let homeButton = new am4core.Button();\n\n        // Home Button \n        homeButton.events.on(\"hit\", function() {\n        chart.goHome();\n        });\n\n        homeButton.icon = new am4core.Sprite();\n        homeButton.padding(7, 5, 7, 5);\n        homeButton.width = 30;\n        homeButton.icon.path = \"M16,8 L14,8 L14,16 L10,16 L10,10 L6,10 L6,16 L2,16 L2,8 L0,8 L8,0 L16,8 Z M16,8\";\n        homeButton.marginBottom = 10;\n        homeButton.parent = chart.zoomControl;\n        homeButton.insertBefore(chart.zoomControl.plusButton);\n          \n          // Create active state\n        //   var activeState = polygonTemplate.states.create(\"active\");\n        //   activeState.properties.fill = chart.colors.getIndex(1);\n      \n        //   // Create an event to toggle \"active\" state\n        //   polygonTemplate.events.on(\"hit\", function (event) {\n        //     event.target.isActive = !event.target.isActive;\n        //   })\n      \n        }\n\n        \n        render() {\n        // const [modalShow, setModalShow] = useState(false); onClick={this.openModal}\n\n          return (\n        <div>\n            <div id=\"chartdiv\" style={{ width: \"100%\", height: \"700px\" }}>\n                \n            </div>\n            <Modals show={this.state.isOpen} onHide={this.closeModal} />\n\n        </div>\n    )\n}}\n\nexport default Maps"]},"metadata":{},"sourceType":"module"}