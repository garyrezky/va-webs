{"ast":null,"code":"var _jsxFileName = \"/Users/muhammad-mac/Documents/va-web/src/components/maps.js\";\nimport React, { Component } from 'react';\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport Modals from '../components/modalSignup';\nimport '../App.css';\nimport { Button, Col, Row, Container, Form } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nam4core.useTheme(am4themes_animated); // const Register = () => {\n\nclass Maps extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isOpen: false\n    };\n\n    this.openModal = () => this.setState({\n      isOpen: true\n    });\n\n    this.closeModal = () => this.setState({\n      isOpen: false\n    });\n  }\n\n  componentDidMount() {\n    // Create map instance\n    var chart = am4core.create(\"chartdiv\", am4maps.MapChart); // Set map definition\n    //   chart.geodataSource.url = \"https://www.amcharts.com/lib/4/geodata/json/worldLow.json\";\n    //   chart.geodataSource.events.on(\"parseended\", function(event) {\n    //     let data = [];\n    //     for(var i = 0; i < event.target.data.features.length; i++) {\n    //       data.push({\n    //         id: event.target.data.features[i].id,\n    //         value: Math.round( Math.random() * 10000 )\n    //       })\n    //     }\n    //     polygonSeries.data = data;\n    //   })\n\n    let map = am4core.create(\"chartdiv\", am4maps.MapChart);\n    map.geodata = am4geodata_worldLow; // Set projection\n\n    chart.projection = new am4maps.projections.Mercator(); // Add zoom control\n\n    chart.zoomControl = new am4maps.ZoomControl(); // Set initial zoom\n\n    chart.homeZoomLevel = 0.5; // Create map polygon series\n\n    var polygonSeries = chart.series.push(new am4maps.MapPolygonSeries()); // Make map load polygon (like country names) data from GeoJSON\n\n    polygonSeries.useGeodata = true; // Configure series\n\n    var polygonTemplate = polygonSeries.mapPolygons.template;\n    polygonTemplate.tooltipText = \"{name}: {value}\";\n    polygonTemplate.fill = am4core.color(\"#74B266\"); // Create hover state and set alternative fill color\n\n    var hs = polygonTemplate.states.create(\"hover\");\n    hs.properties.fill = am4core.color(\"#367B25\"); // Remove Antarctica\n\n    polygonSeries.exclude = [\"AQ\"]; // Add some data\n\n    polygonSeries.data = [{\n      // \"id\": \"ID-SA\",\n      // \"name\": \"Sulawesi Utara\",\n      // \"value\": 9331,\n      // \"fill\": am4core.color(\"#F05C5C\")\n      // }, {\n      // \"id\": \"ID-KI\",\n      // \"name\": \"Kalimnantan Timur\",\n      // \"value\": 50,\n      // \"fill\": am4core.color(\"#5C5CFF\")\n      \"id\": \"US\",\n      \"name\": \"United States\",\n      \"fill\": am4core.color(\"#F05C5C\")\n    }, {\n      \"id\": \"FR\",\n      \"name\": \"France\",\n      \"fill\": am4core.color(\"#5C5CFF\")\n    }]; // Bind \"fill\" property to \"fill\" key in data\n\n    polygonTemplate.propertyFields.fill = \"fill\"; // Create hover state and set alternative fill color\n    //   var hs = polygonTemplate.states.create(\"hover\");\n    //   hs.properties.fill = chart.colors.getIndex(0);\n    //   // Create active state\n    //   var activeState = polygonTemplate.states.create(\"active\");\n    //   activeState.properties.fill = chart.colors.getIndex(1);\n    // Create an event to toggle \"active\" state\n    //   polygonTemplate.events.on(\"hit\", function(ev) {\n    //     ev.target.isActive = !ev.target.isActive;\n    //     chart.closeAllPopups();\n    //     chart.openPopup(\"We clicked on <strong>\" + ev.target.dataItem.dataContext.name + \" </strong>\" + ev.target.dataItem.dataContext.id);\n    //   });\n\n    let button = chart.chartContainer.createChild(am4core.Button);\n    button.padding(5, 5, 5, 5);\n    button.align = \"right\";\n    button.marginRight = 15;\n    button.events.on(\"hit\", function () {\n      chart.goHome();\n    });\n    button.icon = new am4core.Sprite();\n    button.icon.path = \"M16,8 L14,8 L14,16 L10,16 L10,10 L6,10 L6,16 L2,16 L2,8 L0,8 L8,0 L16,8 Z M16,8\";\n  }\n\n  componentWillUnmount() {\n    if (this.chart) {\n      this.chart.dispose();\n    }\n  }\n\n  render() {\n    // const [modalShow, setModalShow] = useState(false); onClick={this.openModal}\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"chartdiv\",\n        style: {\n          width: \"100%\",\n          height: \"700px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Modals, {\n        show: this.state.isOpen,\n        onHide: this.closeModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default Maps;","map":{"version":3,"sources":["/Users/muhammad-mac/Documents/va-web/src/components/maps.js"],"names":["React","Component","am4core","am4maps","am4themes_animated","Modals","Button","Col","Row","Container","Form","useTheme","Maps","state","isOpen","openModal","setState","closeModal","componentDidMount","chart","create","MapChart","map","geodata","am4geodata_worldLow","projection","projections","Mercator","zoomControl","ZoomControl","homeZoomLevel","polygonSeries","series","push","MapPolygonSeries","useGeodata","polygonTemplate","mapPolygons","template","tooltipText","fill","color","hs","states","properties","exclude","data","propertyFields","button","chartContainer","createChild","padding","align","marginRight","events","on","goHome","icon","Sprite","path","componentWillUnmount","dispose","render","width","height"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\"; \nimport Modals from '../components/modalSignup'\nimport '../App.css'\n\nimport { Button, Col, Row, Container, Form } from 'react-bootstrap'\nam4core.useTheme(am4themes_animated);\n\n// const Register = () => {\n    class Maps extends Component {\n\n        state = {\n            isOpen: false\n          };\n        \n          openModal = () => this.setState({ isOpen: true });\n          closeModal = () => this.setState({ isOpen: false });\n      \n        componentDidMount() {\n          // Create map instance\n          var chart = am4core.create(\"chartdiv\", am4maps.MapChart);\n      \n          // Set map definition\n        //   chart.geodataSource.url = \"https://www.amcharts.com/lib/4/geodata/json/worldLow.json\";\n        //   chart.geodataSource.events.on(\"parseended\", function(event) {\n        //     let data = [];\n        //     for(var i = 0; i < event.target.data.features.length; i++) {\n        //       data.push({\n        //         id: event.target.data.features[i].id,\n        //         value: Math.round( Math.random() * 10000 )\n        //       })\n        //     }\n        //     polygonSeries.data = data;\n        //   })\n        let map = am4core.create(\"chartdiv\", am4maps.MapChart);\n        map.geodata = am4geodata_worldLow;\n          // Set projection\n          chart.projection = new am4maps.projections.Mercator();\n      \n          // Add zoom control\n          chart.zoomControl = new am4maps.ZoomControl();\n      \n          // Set initial zoom\n          chart.homeZoomLevel = 0.5;\n      \n          // Create map polygon series\n            var polygonSeries = chart.series.push(new am4maps.MapPolygonSeries());\n\n            // Make map load polygon (like country names) data from GeoJSON\n            polygonSeries.useGeodata = true;\n\n            // Configure series\n            var polygonTemplate = polygonSeries.mapPolygons.template;\n            polygonTemplate.tooltipText = \"{name}: {value}\";\n            polygonTemplate.fill = am4core.color(\"#74B266\");\n\n            // Create hover state and set alternative fill color\n            var hs = polygonTemplate.states.create(\"hover\");\n            hs.properties.fill = am4core.color(\"#367B25\");\n\n            // Remove Antarctica\n            polygonSeries.exclude = [\"AQ\"];\n\n            // Add some data\n            polygonSeries.data = [{\n            // \"id\": \"ID-SA\",\n            // \"name\": \"Sulawesi Utara\",\n            // \"value\": 9331,\n            // \"fill\": am4core.color(\"#F05C5C\")\n            // }, {\n            // \"id\": \"ID-KI\",\n            // \"name\": \"Kalimnantan Timur\",\n            // \"value\": 50,\n            // \"fill\": am4core.color(\"#5C5CFF\")\n            \n                \"id\": \"US\",\n                \"name\": \"United States\",\n                \"fill\": am4core.color(\"#F05C5C\")\n              }, {\n                \"id\": \"FR\",\n                \"name\": \"France\",\n                \"fill\": am4core.color(\"#5C5CFF\")\n            \n            }];\n\n            // Bind \"fill\" property to \"fill\" key in data\n            polygonTemplate.propertyFields.fill = \"fill\";\n          // Create hover state and set alternative fill color\n        //   var hs = polygonTemplate.states.create(\"hover\");\n        //   hs.properties.fill = chart.colors.getIndex(0);\n          \n      \n        //   // Create active state\n        //   var activeState = polygonTemplate.states.create(\"active\");\n        //   activeState.properties.fill = chart.colors.getIndex(1);\n      \n          // Create an event to toggle \"active\" state\n        //   polygonTemplate.events.on(\"hit\", function(ev) {\n        //     ev.target.isActive = !ev.target.isActive;\n        //     chart.closeAllPopups();\n        //     chart.openPopup(\"We clicked on <strong>\" + ev.target.dataItem.dataContext.name + \" </strong>\" + ev.target.dataItem.dataContext.id);\n            \n        //   });\n\n\n          let button = chart.chartContainer.createChild(am4core.Button);\n            button.padding(5, 5, 5, 5);\n            button.align = \"right\";\n            button.marginRight = 15;\n            button.events.on(\"hit\", function() {\n            chart.goHome();\n            });\n            button.icon = new am4core.Sprite();\n            button.icon.path = \"M16,8 L14,8 L14,16 L10,16 L10,10 L6,10 L6,16 L2,16 L2,8 L0,8 L8,0 L16,8 Z M16,8\";\n      \n        }\n      \n        componentWillUnmount() {\n          if (this.chart) {\n            this.chart.dispose();\n          }\n        }\n\n        \n        render() {\n        // const [modalShow, setModalShow] = useState(false); onClick={this.openModal}\n\n          return (\n        <div>\n            <div id=\"chartdiv\" style={{ width: \"100%\", height: \"700px\" }}>\n                \n            </div>\n            <Modals show={this.state.isOpen} onHide={this.closeModal} />\n\n        </div>\n    )\n}}\n\nexport default Maps"]},"metadata":{},"sourceType":"module"}