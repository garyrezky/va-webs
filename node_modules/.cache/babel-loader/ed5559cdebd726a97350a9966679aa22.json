{"ast":null,"code":"var _jsxFileName = \"/Users/muhammad-mac/Documents/va-web/src/components/maps.js\";\nimport React, { Component } from 'react';\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport Modals from '../components/modalSignup';\nimport '../App.css';\nimport { Button, Col, Row, Container, Form } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nam4core.useTheme(am4themes_animated); // const Register = () => {\n\nclass Maps extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isOpen: false\n    };\n\n    this.openModal = () => this.setState({\n      isOpen: true\n    });\n\n    this.closeModal = () => this.setState({\n      isOpen: false\n    });\n  }\n\n  componentDidMount() {\n    // Create map instance\n    var chart = am4core.create(\"chartdiv\", am4maps.MapChart); // Set map definition\n\n    chart.geodataSource.url = \"https://www.amcharts.com/lib/4/geodata/json/indonesiaLow.json\";\n    chart.geodataSource.events.on(\"parseended\", function (event) {\n      let data = [];\n\n      for (var i = 0; i < event.target.data.features.length; i++) {\n        data.push({\n          id: event.target.data.features[i].id,\n          value: Math.round(Math.random() * 10000)\n        });\n      }\n\n      polygonSeries.data = data;\n    }); // Set projection\n\n    chart.projection = new am4maps.projections.Mercator(); // Add zoom control\n\n    chart.zoomControl = new am4maps.ZoomControl(); // Set initial zoom\n\n    chart.homeZoomLevel = 1; // Create map polygon series\n\n    var polygonSeries = chart.series.push(new am4maps.MapPolygonSeries());\n    polygonSeries.mapPolygons.template.strokeWidth = 0.5; // Make map load polygon (like country names) data from GeoJSON\n\n    polygonSeries.useGeodata = true; // Configure series\n\n    var polygonTemplate = polygonSeries.mapPolygons.template;\n    polygonTemplate.tooltipText = \"{name}: {value}\";\n    polygonTemplate.fill = am4core.color(\"#aac4e7\"); // Create hover state and set alternative fill color\n\n    var hs = polygonTemplate.states.create(\"hover\");\n    hs.properties.fill = chart.colors.getIndex(0); // Create active state\n\n    var activeState = polygonTemplate.states.create(\"active\");\n    activeState.properties.fill = chart.colors.getIndex(1); // Create an event to toggle \"active\" state\n\n    polygonTemplate.events.on(\"double hit\", function (event) {\n      chart.openModal(\"The id for \" + event.target.dataItem.dataContext.name + \" is <strong>\" + event.target.dataItem.dataContext.id + \"</strong>.\"); // event.target.isOpen = !event.target.isOpen;\n      // chart.openModal(`<a onClick={this.openModal}></a>`);\n    });\n    let button = chart.chartContainer.createChild(am4core.Button);\n    button.padding(5, 5, 5, 5);\n    button.align = \"right\";\n    button.marginRight = 15;\n    button.events.on(\"hit\", function () {\n      chart.goHome();\n    });\n    button.icon = new am4core.Sprite();\n    button.icon.path = \"M16,8 L14,8 L14,16 L10,16 L10,10 L6,10 L6,16 L2,16 L2,8 L0,8 L8,0 L16,8 Z M16,8\";\n  }\n\n  componentWillUnmount() {\n    if (this.chart) {\n      this.chart.dispose();\n    }\n  }\n\n  render() {\n    // const [modalShow, setModalShow] = useState(false);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"chartdiv\",\n        style: {\n          width: \"100%\",\n          height: \"750px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Modals, {\n        show: this.state.isOpen,\n        onHide: this.closeModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default Maps;","map":{"version":3,"sources":["/Users/muhammad-mac/Documents/va-web/src/components/maps.js"],"names":["React","Component","am4core","am4maps","am4themes_animated","Modals","Button","Col","Row","Container","Form","useTheme","Maps","state","isOpen","openModal","setState","closeModal","componentDidMount","chart","create","MapChart","geodataSource","url","events","on","event","data","i","target","features","length","push","id","value","Math","round","random","polygonSeries","projection","projections","Mercator","zoomControl","ZoomControl","homeZoomLevel","series","MapPolygonSeries","mapPolygons","template","strokeWidth","useGeodata","polygonTemplate","tooltipText","fill","color","hs","states","properties","colors","getIndex","activeState","dataItem","dataContext","name","button","chartContainer","createChild","padding","align","marginRight","goHome","icon","Sprite","path","componentWillUnmount","dispose","render","width","height"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\"; \nimport Modals from '../components/modalSignup'\nimport '../App.css'\n\nimport { Button, Col, Row, Container, Form } from 'react-bootstrap'\nam4core.useTheme(am4themes_animated);\n\n// const Register = () => {\n    class Maps extends Component {\n\n        componentDidMount() {\n          // Create map instance\n          var chart = am4core.create(\"chartdiv\", am4maps.MapChart);\n      \n          // Set map definition\n          chart.geodataSource.url = \"https://www.amcharts.com/lib/4/geodata/json/indonesiaLow.json\";\n          chart.geodataSource.events.on(\"parseended\", function(event) {\n            let data = [];\n            for(var i = 0; i < event.target.data.features.length; i++) {\n              data.push({\n                id: event.target.data.features[i].id,\n                value: Math.round( Math.random() * 10000 )\n              })\n            }\n            polygonSeries.data = data;\n          })\n      \n          // Set projection\n          chart.projection = new am4maps.projections.Mercator();\n      \n          // Add zoom control\n          chart.zoomControl = new am4maps.ZoomControl();\n      \n          // Set initial zoom\n          chart.homeZoomLevel = 1;\n      \n          // Create map polygon series\n          var polygonSeries = chart.series.push(new am4maps.MapPolygonSeries());\n          polygonSeries.mapPolygons.template.strokeWidth = 0.5;\n      \n      \n          // Make map load polygon (like country names) data from GeoJSON\n          polygonSeries.useGeodata = true;\n      \n          // Configure series\n          var polygonTemplate = polygonSeries.mapPolygons.template;\n      \n          polygonTemplate.tooltipText = \"{name}: {value}\";\n          polygonTemplate.fill = am4core.color(\"#aac4e7\");\n      \n          // Create hover state and set alternative fill color\n          var hs = polygonTemplate.states.create(\"hover\");\n          hs.properties.fill = chart.colors.getIndex(0);\n      \n      \n          // Create active state\n          var activeState = polygonTemplate.states.create(\"active\");\n          activeState.properties.fill = chart.colors.getIndex(1);\n      \n          // Create an event to toggle \"active\" state\n          polygonTemplate.events.on(\"double hit\", function(event) {\n            chart.openModal(\n                \"The id for \" +\n                  event.target.dataItem.dataContext.name +\n                  \" is <strong>\" +\n                  event.target.dataItem.dataContext.id +\n                  \"</strong>.\"\n              );\n\n            // event.target.isOpen = !event.target.isOpen;\n\n            // chart.openModal(`<a onClick={this.openModal}></a>`);\n          });\n\n          let button = chart.chartContainer.createChild(am4core.Button);\n            button.padding(5, 5, 5, 5);\n            button.align = \"right\";\n            button.marginRight = 15;\n            button.events.on(\"hit\", function() {\n            chart.goHome();\n            });\n            button.icon = new am4core.Sprite();\n            button.icon.path = \"M16,8 L14,8 L14,16 L10,16 L10,10 L6,10 L6,16 L2,16 L2,8 L0,8 L8,0 L16,8 Z M16,8\";\n      \n        }\n      \n        componentWillUnmount() {\n          if (this.chart) {\n            this.chart.dispose();\n          }\n        }\n\n          state = {\n            isOpen: false\n          };\n        \n          openModal = () => this.setState({ isOpen: true });\n          closeModal = () => this.setState({ isOpen: false });\n      \n        render() {\n        // const [modalShow, setModalShow] = useState(false);\n\n          return (\n        <div>\n            <div id=\"chartdiv\" style={{ width: \"100%\", height: \"750px\" }}>\n    \n            {/* <div id=\"chartdiv\" style={{ width: \"100%\", height: \"750px\" }} onClick={this.handleClick}> */}\n            {/* {this.state.isToggleOn ? 'ON' : 'OFF'} */}\n                \n            </div>\n            <Modals show={this.state.isOpen} onHide={this.closeModal} />\n\n        </div>\n    )\n}}\n\nexport default Maps"]},"metadata":{},"sourceType":"module"}